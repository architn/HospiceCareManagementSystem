/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Appointments;

import Business.Alerts.Alert;
import Business.Appointments.Appointment;
import Business.EcoSystem;
import Business.LookUpMapping;
import Business.Providers.Provider;
import Business.UserAccount.UserAccount;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author architnigam
 */
public class ManageAppointmentsProviderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageAppointmentsJPanel
     */
    UserAccount userAccount;
    EcoSystem system;
    public ManageAppointmentsProviderJPanel(UserAccount userAccount, EcoSystem system) {
        initComponents();
        this.userAccount = userAccount;
        this.system = system;
        populateTable();
        btnSave.setVisible(false);
        txtComments.setVisible(false);
        lblComments.setVisible(false);
        cbAppointmentCompleted.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        cbAppointmentCompleted = new javax.swing.JCheckBox();
        txtComments = new javax.swing.JTextField();
        lblComments = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 20)); // NOI18N
        jLabel1.setText("Appointments Scheduled");
        add(jLabel1);
        jLabel1.setBounds(10, 10, 337, 59);

        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Patient Name", "Status", "Reason", "Appointment Time", "Appointment"
            }
        ));
        jScrollPane1.setViewportView(tblAppointments);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 152, 730, 170);

        btnUpdate.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate);
        btnUpdate.setBounds(20, 340, 98, 34);

        cbAppointmentCompleted.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        cbAppointmentCompleted.setText("Appointment completed?");
        add(cbAppointmentCompleted);
        cbAppointmentCompleted.setBounds(100, 450, 212, 36);
        add(txtComments);
        txtComments.setBounds(140, 520, 278, 69);

        lblComments.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        lblComments.setText("Comments:");
        add(lblComments);
        lblComments.setBounds(30, 530, 78, 15);

        btnSave.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave);
        btnSave.setBounds(170, 630, 98, 33);

        btnCancel.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        add(btnCancel);
        btnCancel.setBounds(160, 340, 74, 34);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ManageAppointmentProviderOGIMG.png"))); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(0, 0, 1130, 860);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblAppointments.getSelectedRow();
        LookUpMapping lookups = new LookUpMapping();
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        Appointment selectedAppointment = (Appointment) model.getValueAt(selectedIndex, 5);
        if(selectedAppointment.getAppointmentStatus() == 0)
        {
            btnSave.setVisible(true);
            txtComments.setVisible(true);
            lblComments.setVisible(true);
            cbAppointmentCompleted.setVisible(true);
        }
        else{
            String appointmentStatusValue = lookups.mapAppointmentStatus(selectedAppointment.getAppointmentStatus());
            JOptionPane.showMessageDialog(this, "An appointment with status '"+appointmentStatusValue+"' cannot be updated");
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblAppointments.getSelectedRow();
        LookUpMapping lookups = new LookUpMapping();
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        Appointment selectedAppointment = (Appointment) model.getValueAt(selectedIndex, 5);
        if(selectedAppointment.getAppointmentStatus() == 0)
        {
            Appointment updatedAppointment = system.getAppointmentDirectory().updateAppointment(selectedAppointment);
            updatedAppointment.setAppointmentStatus(2);
            updatedAppointment.setAppointmentClosingComments("Canceled");
        }
        else{
            String appointmentStatusValue = lookups.mapAppointmentStatus(selectedAppointment.getAppointmentStatus());
            JOptionPane.showMessageDialog(this, "An appointment with status '"+appointmentStatusValue+"' cannot be canceled");
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblAppointments.getSelectedRow();
        if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Please select an appointment before proceding!");
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
            Appointment selectedAppointment = (Appointment) model.getValueAt(selectedIndex, 5);
            Appointment updatedAppointment = system.getAppointmentDirectory().updateAppointment(selectedAppointment);
            if(cbAppointmentCompleted.isSelected())
            {
                updatedAppointment.setAppointmentStatus(1);
                updatedAppointment.setAppointmentClosingComments(txtComments.getText());
            }
            cbAppointmentCompleted.setVisible(false);
            btnSave.setVisible(false);
            txtComments.setVisible(false);
            lblComments.setVisible(false);
            JOptionPane.showMessageDialog(this, "Appointment successfully closed!");
            populateTable();
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox cbAppointmentCompleted;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblComments;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTextField txtComments;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model1 = (DefaultTableModel) tblAppointments.getModel();
        LookUpMapping lookups = new LookUpMapping();
        Provider provider = system.getProviderDirectory().findProviderByEmailID(userAccount.getUsername(), 
                system.getProviderDirectory().getProviderList());
        model1.setRowCount(0);
        for(int index = 0; index < system.getAppointmentDirectory().getListOfAppointments().size(); index++)
        {
            Object[] row = new Object[6];
            Appointment currentAppointment = system.getAppointmentDirectory().getListOfAppointments().get(index);
            if(currentAppointment.getAppointmentProvider().getProviderNPI().equals(
            provider.getProviderNPI()))
            {
                row[0] = currentAppointment.getAppointmentID();
                row[1] = currentAppointment.getAppointmentPatient().getPatientName();
                row[2] = lookups.mapAppointmentStatus(currentAppointment.getAppointmentStatus());
                row[3] = currentAppointment.getAppointmentReason();
                DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                String dateToString = df.format(currentAppointment.getAppointmentDate()).substring(0, 10); 
                row[4] = dateToString + " " + currentAppointment.getAppointmentTime();
                row[5] = currentAppointment;
            }
            model1.addRow(row);
        }
    }
}
