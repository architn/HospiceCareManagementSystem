/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Appointments;

import Business.Appointments.Appointment;
import Business.Counsellors.Counsellor;
import Business.EcoSystem;
import Business.Email.Email;
import Business.Patients.Patient;
import Business.Providers.Provider;
import Business.SetIDsForWorkflows;
import Business.UserAccount.UserAccount;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

/**
 *
 * @author architnigam
 */
public class ScheduleAppointmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ScheduleAppointmentJPanel
     */
    EcoSystem system;
    UserAccount userAccount;
    ButtonGroup group1;
    public ScheduleAppointmentJPanel(EcoSystem system, UserAccount userAccount) {
        initComponents();
        this.system = system;
        this.userAccount = userAccount;
        setDynamicView(false);
        
        group1 = new ButtonGroup();
        group1.add(btnElevenAM);
        group1.add(btnOnePM);
        group1.add(btnTwoPM);
        group1.add(btnThreePM);
        group1.add(btnFourPM);
        group1.add(btnFourThirtyPM);
        group1.add(btnFivePM);
        group1.add(btnFiveThirtyPM);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ddChoose = new javax.swing.JComboBox();
        btnProceed = new javax.swing.JButton();
        lblAppointment = new javax.swing.JLabel();
        ddAppointmentWith = new javax.swing.JComboBox<>();
        lblAvailableSlots = new javax.swing.JLabel();
        lblAppointmentReason = new javax.swing.JLabel();
        txtAppointmentReason = new javax.swing.JTextField();
        btnScheduleAppointment = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        lblTime = new javax.swing.JLabel();
        btnElevenAM = new javax.swing.JToggleButton();
        btnOnePM = new javax.swing.JToggleButton();
        btnThreePM = new javax.swing.JToggleButton();
        btnTwoPM = new javax.swing.JToggleButton();
        btnFourPM = new javax.swing.JToggleButton();
        btnFourThirtyPM = new javax.swing.JToggleButton();
        btnFiveThirtyPM = new javax.swing.JToggleButton();
        btnFivePM = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("SCHEDULE AN APPOINTMENT");
        add(jLabel1);
        jLabel1.setBounds(171, 54, 250, 34);

        jLabel2.setText("Schedule an appointment with: ");
        add(jLabel2);
        jLabel2.setBounds(81, 124, 198, 16);

        ddChoose.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Provider", "Counsellor" }));
        add(ddChoose);
        ddChoose.setBounds(291, 120, 158, 27);

        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });
        add(btnProceed);
        btnProceed.setBounds(499, 120, 107, 27);
        add(lblAppointment);
        lblAppointment.setBounds(81, 193, 76, 24);

        ddAppointmentWith.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));
        add(ddAppointmentWith);
        ddAppointmentWith.setBounds(291, 193, 137, 27);

        lblAvailableSlots.setText("Select a date: ");
        add(lblAvailableSlots);
        lblAvailableSlots.setBounds(81, 260, 87, 16);

        lblAppointmentReason.setText("Appointment Reason: ");
        add(lblAppointmentReason);
        lblAppointmentReason.setBounds(81, 483, 139, 16);
        add(txtAppointmentReason);
        txtAppointmentReason.setBounds(291, 455, 255, 73);

        btnScheduleAppointment.setText("Schedule an appointment");
        btnScheduleAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleAppointmentActionPerformed(evt);
            }
        });
        add(btnScheduleAppointment);
        btnScheduleAppointment.setBounds(291, 576, 203, 29);
        add(dateChooser);
        dateChooser.setBounds(291, 250, 129, 26);

        lblTime.setText("Select a time:");
        add(lblTime);
        lblTime.setBounds(81, 316, 96, 27);

        btnElevenAM.setText("11:00 AM");
        btnElevenAM.setActionCommand("11:00:00 AM");
        add(btnElevenAM);
        btnElevenAM.setBounds(291, 316, 104, 29);

        btnOnePM.setText("1:00 PM");
        btnOnePM.setActionCommand("1:00:00 PM");
        add(btnOnePM);
        btnOnePM.setBounds(401, 316, 94, 29);

        btnThreePM.setText("3:00 PM");
        btnThreePM.setActionCommand("3:00:00 PM");
        add(btnThreePM);
        btnThreePM.setBounds(607, 316, 94, 29);

        btnTwoPM.setText("2:00 PM");
        btnTwoPM.setActionCommand("2:00:00 PM");
        add(btnTwoPM);
        btnTwoPM.setBounds(507, 316, 94, 29);

        btnFourPM.setText("4:00 PM");
        btnFourPM.setActionCommand("4:00:00 PM");
        add(btnFourPM);
        btnFourPM.setBounds(291, 387, 94, 29);

        btnFourThirtyPM.setText("4:30 PM");
        btnFourThirtyPM.setActionCommand("4:30:00 PM");
        add(btnFourThirtyPM);
        btnFourThirtyPM.setBounds(403, 387, 94, 29);

        btnFiveThirtyPM.setText("5:30 PM");
        btnFiveThirtyPM.setActionCommand("6:00:00 PM");
        add(btnFiveThirtyPM);
        btnFiveThirtyPM.setBounds(603, 387, 94, 29);

        btnFivePM.setText("5:00 PM");
        btnFivePM.setActionCommand("5:00:00 PM");
        add(btnFivePM);
        btnFivePM.setBounds(503, 387, 94, 29);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AppointmentScheduleFinal.jpg"))); // NOI18N
        add(jLabel3);
        jLabel3.setBounds(0, 0, 1180, 790);
    }// </editor-fold>//GEN-END:initComponents

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        // TODO add your handling code here:
        String selectedValue = ddChoose.getSelectedItem().toString();
        setDynamicView(true);
        lblAppointment.setText(selectedValue);
        if(selectedValue.equals("Provider"))
        {
            Patient patient = system.getPatientDirectory().findPatientByEmailID(userAccount.getUsername(), 
                    system.getPatientDirectory().getPatientList());
            Provider provider = system.getProviderDirectory().findProviderByNPI(patient.getRegisteredProvider().getProviderNPI()
                    , system.getProviderDirectory().getProviderList());
            ddAppointmentWith.addItem(provider.getProviderName());
        }
        else{
            for(Counsellor counsellor : system.getCounsellorDirectory().getListOfCounsellors())
            {
                ddAppointmentWith.addItem(counsellor.getCounsellorName());
            }
        }
        ddChoose.setEditable(false);
        btnProceed.setEnabled(false);
    }//GEN-LAST:event_btnProceedActionPerformed

    private void btnScheduleAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleAppointmentActionPerformed
        // TODO add your handling code here:
        String role = ddChoose.getSelectedItem().toString();
        String appointmentReason = txtAppointmentReason.getText();
        switch(role)
        {
            case "Provider":
                if(dateChooser.getDate() != null && determinePressButton() != null)
                {
                    try{
                            Patient patient = system.getPatientDirectory().findPatientByEmailID(userAccount.getUsername(), 
                                                system.getPatientDirectory().getPatientList());
                    
                            Provider provider = system.getProviderDirectory().findProviderByNPI(patient.getRegisteredProvider().getProviderNPI()
                                                    , system.getProviderDirectory().getProviderList());
                    
                            Date selectedDate = dateChooser.getDate();
                            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");  
                            String strDate = dateFormat.format(selectedDate);  
                            Date appointmentDate =new SimpleDateFormat("MM/dd/yyyy").parse(strDate);
                            JToggleButton pressedButton = determinePressButton();
                            String selectedTime = pressedButton.getActionCommand();
                    
                            if(validateIfAppointmentDoesNotExistForAProviderAtSameTime(provider, selectedDate, selectedTime))
                            {
                                SetIDsForWorkflows setIDForWorkflow = new SetIDsForWorkflows();
                                String appointmentID = setIDForWorkflow.SetIDForAppointment();
                                Appointment newAppointment = system.getAppointmentDirectory().createNewAppointmentWithProvider(appointmentID, 
                                                            patient, provider, selectedDate, selectedTime, appointmentReason);
                                if(newAppointment != null)
                                {
                                    Email email = new Email();
                                    email.SendEmailOfAppointment(userAccount.getUsername(), appointmentID, patient.getPatientName(), 
                                                                   provider.getProviderName(),  appointmentDate, selectedTime);
                                    JOptionPane.showMessageDialog(this, "Appointment successfully created on \n\nAppointment Date: '"+selectedDate+""
                                    + "' \n\n Appointment Time:  "+selectedTime+"'.\n We have also mailed you the confirmation "
                                            + "email at "+userAccount.getUsername());
                                }
                                else{
                            
                                }
                            }
                            else{
                                    JOptionPane.showMessageDialog(this, "An appointments exists at the selected date and time! Choose a different"
                                    + " time slot!");
                                }
                        }
                        catch(Exception ex)
                        {
                        
                        }
                 }
                break;
            case "Counsellor":
                if(dateChooser.getDate() != null && determinePressButton() != null)
                {
                    try{
                        Patient patient = system.getPatientDirectory().findPatientByEmailID(userAccount.getUsername(), 
                                          system.getPatientDirectory().getPatientList());
                    
                    String selectedCounsellor = ddAppointmentWith.getSelectedItem().toString();
                    Counsellor counsellor = system.getCounsellorDirectory().findCounsellorByName(selectedCounsellor, 
                            system.getCounsellorDirectory().getListOfCounsellors());
                    Date selectedDate = dateChooser.getDate();
                    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");  
                    String strDate = dateFormat.format(selectedDate);  
                    Date appointmentDate =new SimpleDateFormat("MM/dd/yyyy").parse(strDate); 
                    JToggleButton pressedButton = determinePressButton();
                    String selectedTime = pressedButton.getActionCommand();
                    
                    if(!validateIfAppointmentDoesNotExistForACounsellorAtSameTime(counsellor, appointmentDate, selectedTime))
                    {
                         SetIDsForWorkflows setIDForWorkflow = new SetIDsForWorkflows();
                        String appointmentID = setIDForWorkflow.SetIDForAppointment();
                        Appointment newAppointment = system.getAppointmentDirectory().createNewAppointmentWithCounsellor(appointmentID, 
                            patient, counsellor, appointmentDate, selectedTime, appointmentReason);
                        if(newAppointment != null)
                        {
                            Email email = new Email();
                            email.SendEmailOfAppointment(userAccount.getUsername(), appointmentID, patient.getPatientName(),
                                    counsellor.getCounsellorName(), appointmentDate, selectedTime);
                            JOptionPane.showMessageDialog(this, "Appointment successfully created on \n\nAppointment Date: '"+appointmentDate+""
                                    + "' \n\n Appointment Time:  "+selectedTime+"'\n We have also mailed you the confirmation "
                                            + "email at "+userAccount.getUsername());
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Appointment was not created!");
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "An appointments exists at the selected date and time! Choose a different"
                                + " time slot!");
                    }
                    }
                    catch(Exception ex)
                    {
                        ex.printStackTrace();
                    }
                 }
                break;    
        }
    }//GEN-LAST:event_btnScheduleAppointmentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnElevenAM;
    private javax.swing.JToggleButton btnFivePM;
    private javax.swing.JToggleButton btnFiveThirtyPM;
    private javax.swing.JToggleButton btnFourPM;
    private javax.swing.JToggleButton btnFourThirtyPM;
    private javax.swing.JToggleButton btnOnePM;
    private javax.swing.JButton btnProceed;
    private javax.swing.JButton btnScheduleAppointment;
    private javax.swing.JToggleButton btnThreePM;
    private javax.swing.JToggleButton btnTwoPM;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JComboBox<String> ddAppointmentWith;
    private javax.swing.JComboBox<String> ddChoose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAppointment;
    private javax.swing.JLabel lblAppointmentReason;
    private javax.swing.JLabel lblAvailableSlots;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtAppointmentReason;
    // End of variables declaration//GEN-END:variables

    private void setDynamicView(boolean viewStatus) {
        lblAppointment.setVisible(viewStatus);
        ddAppointmentWith.setVisible(viewStatus);
        lblAvailableSlots.setVisible(viewStatus);
        btnScheduleAppointment.setVisible(viewStatus);
        btnElevenAM.setVisible(viewStatus);
        btnOnePM.setVisible(viewStatus);
        btnTwoPM.setVisible(viewStatus);
        dateChooser.setVisible(viewStatus);
        btnThreePM.setVisible(viewStatus);
        btnFourPM.setVisible(viewStatus);
        btnFourThirtyPM.setVisible(viewStatus);
        btnFivePM.setVisible(viewStatus);
        btnFiveThirtyPM.setVisible(viewStatus);
        lblTime.setVisible(viewStatus);
        lblAppointmentReason.setVisible(viewStatus);
        lblAvailableSlots.setVisible(viewStatus);
        txtAppointmentReason.setVisible(viewStatus);
    }

    private JToggleButton determinePressButton() {
        if(btnElevenAM.isSelected())
        {
            return btnElevenAM;
        }
        else
        {
            if(btnOnePM.isSelected())
            {
                return btnOnePM;
            }
            else{
                if(btnThreePM.isSelected())
                {
                    return btnThreePM;
                }
                else{
                    if(btnFourPM.isSelected())
                    {
                        return btnFourPM;
                    }
                    else{
                        if(btnFourThirtyPM.isSelected())
                        {
                            return btnFourThirtyPM;
                        }
                        else{
                            if(btnFivePM.isSelected())
                            {
                                return btnFivePM;
                            }
                            else{
                                if(btnFiveThirtyPM.isSelected())
                                {
                                    return btnFiveThirtyPM;
                                }
                            }
                        }
                    }
                }
                    
            }
        }
        


        return null;
    }
    
    
    private boolean validateIfAppointmentDoesNotExistForAProviderAtSameTime(Provider provider, Date selectedDate, 
            String selectedTime)
    {
        ArrayList<Appointment> listOfAppointmentsByProvider = system.getAppointmentDirectory().findAppointmentByProvider(provider.getProviderNPI(), 
                system.getAppointmentDirectory().getListOfAppointments());
        for(Appointment appt : listOfAppointmentsByProvider)
        {
            if(appt.getAppointmentDate().equals(selectedDate) && appt.getAppointmentTime().equals(selectedTime))
            {
                return true;
            }
        }
        return false;
    }
    
    private boolean validateIfAppointmentDoesNotExistForACounsellorAtSameTime(Counsellor counsellor, Date selectedDate, 
            String selectedTime)
    {
        ArrayList<Appointment> listOfAppointmentsByCounsellor = system.getAppointmentDirectory().findAppointmentByCounsellor(counsellor.getCounsellorID(), 
                system.getAppointmentDirectory().getListOfAppointments());
        for(Appointment appt : listOfAppointmentsByCounsellor)
        {
            if(appt.getAppointmentDate().equals(selectedDate) && appt.getAppointmentTime().equals(selectedTime))
            {
                return true;
            }
        }
        return false;
    }
}
