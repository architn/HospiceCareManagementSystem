/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Workflows;

import Business.AppConstants;
import Business.EcoSystem;
import Business.Patients.Patient;
import Business.UserAccount.UserAccount;
import Business.ValidationLogic;
import Business.VitalSigns.BMICalculator;
import Business.VitalSigns.BloodPressureCalculator;
import Business.VitalSigns.CholesterolCalculator;
import Business.VitalSigns.VitalSigns;
import java.awt.Color;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author architnigam
 */
public class VitalSignsReportsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VitalSignsReportsJPanel
     */
    EcoSystem system;
    BMICalculator bmiCalculator = new BMICalculator();
    ValidationLogic validationLogic;
    BloodPressureCalculator bloodPressureCalculator = new BloodPressureCalculator();
    CholesterolCalculator cholesterolCalculator = new CholesterolCalculator();
    AppConstants AppConstants = new AppConstants();
    UserAccount userAccount;
    public VitalSignsReportsJPanel(EcoSystem system, UserAccount userAccount) {
        initComponents();
        this.system = system;
        this.userAccount = userAccount;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoadData = new javax.swing.JButton();
        btnGenderAnalysis = new javax.swing.JButton();
        btnEthinicityAnalysis = new javax.swing.JButton();
        chartPanel = new javax.swing.JPanel();
        ddHealthCategory = new javax.swing.JComboBox();

        btnLoadData.setText("Load Data");
        btnLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataActionPerformed(evt);
            }
        });

        btnGenderAnalysis.setText("Gender Analysis");
        btnGenderAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenderAnalysisActionPerformed(evt);
            }
        });

        btnEthinicityAnalysis.setText("Ethnicity");
        btnEthinicityAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEthinicityAnalysisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 767, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
        );

        ddHealthCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BMI", "Blood Pressure",  "Cholesterol"}));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnLoadData)
                        .addGap(43, 43, 43)
                        .addComponent(ddHealthCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(btnGenderAnalysis)
                        .addGap(18, 18, 18)
                        .addComponent(btnEthinicityAnalysis)
                        .addGap(241, 241, 241)
                        .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadData)
                    .addComponent(ddHealthCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGenderAnalysis)
                            .addComponent(btnEthinicityAnalysis))))
                .addContainerGap(191, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenderAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenderAnalysisActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dcd = new DefaultCategoryDataset();
        String selectedCategory = ddHealthCategory.getSelectedItem().toString();
        if(selectedCategory.equals("BMI"))
        {
            int countOfPatientsWithAbnormallBMILevelsMale = 0;
            int countOfPatientsWithAbnormallBMILevelsFemale = 0;
            int countOfPatientsWithAbnormallBMILevelsOther = 0;
            for(VitalSigns vitalSigns : system.getVitalSignsDirectory().getListOfVitalSigns())
            {
                int bmiCriticalityOfPatient = vitalSigns.getBMIDangerLevel();
                String genderOfPatient = vitalSigns.getGender();
                if(genderOfPatient.equalsIgnoreCase(AppConstants.Male))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormallBMILevelsMale++;
                    }
                }
                else if(genderOfPatient.equalsIgnoreCase(AppConstants.Female))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormallBMILevelsFemale++;
                    }
                }
                 else if(genderOfPatient.equalsIgnoreCase(AppConstants.Other))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormallBMILevelsOther++;
                    }
                }
            }
            dcd.setValue(countOfPatientsWithAbnormallBMILevelsMale, "Patients with Abnormal BMI", "Male");
            dcd.setValue(countOfPatientsWithAbnormallBMILevelsFemale, "Patients with Abnormal BMI", "Female");
            dcd.setValue(countOfPatientsWithAbnormallBMILevelsOther, "Patients with Abnormal BMI", "Others");
            JFreeChart jchart = ChartFactory.createBarChart("Gender level Analysis", "Gender", "Number of patients with abnormal "+selectedCategory, dcd, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = jchart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            ChartFrame chartFrame = new ChartFrame("Records", jchart, true);
            chartFrame.setVisible(true);
            chartFrame.setSize(500, 400);
        }
        
        // Cholestrol
        else if(selectedCategory.equals("Cholesterol"))
        {
            int countOfPatientsWithAbnormalCholesterolLevelsMale = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsFemale = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsOther = 0;
            
            for(VitalSigns vitalSigns : system.getVitalSignsDirectory().getListOfVitalSigns())
            {
                int cholesterolCriticalityOfPatient = vitalSigns.getCholesterolDangerLevel();
                String genderOfPatient = vitalSigns.getGender();
                if(genderOfPatient.equalsIgnoreCase(AppConstants.Male))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsMale++;
                    }
                }
                else if(genderOfPatient.equalsIgnoreCase(AppConstants.Female))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsFemale++;
                    }
                }
                 else if(genderOfPatient.equalsIgnoreCase(AppConstants.Other))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsOther++;
                    }
                }
            }
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsMale, "Patients with Abnormal Cholesterol", "Male");
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsFemale, "Patients with Abnormal Cholesterol", "Female");
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsOther, "Patients with Abnormal Cholesterol", "Others");
            JFreeChart jchart = ChartFactory.createBarChart("Gender level Analysis", "Gender", "Number of patients with abnormal "+selectedCategory, dcd, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = jchart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            ChartFrame chartFrame = new ChartFrame("Records", jchart, true);
            chartFrame.setVisible(true);
            chartFrame.setSize(500, 400);
        }
        
        
        // Blood Pressure
        else{
            
             int countOfPatientsWithAbnormalBPLevelsMale = 0;
            int countOfPatientsWithAbnormalBPLevelsFemale = 0;
            int countOfPatientsWithAbnormalBPLevelsOther = 0;
            
            for(VitalSigns vitalSigns : system.getVitalSignsDirectory().getListOfVitalSigns())
            {
                int bpCriticalityOfPatient = vitalSigns.getBloodPressureDangerLevel();
                String genderOfPatient = vitalSigns.getGender();
                if(genderOfPatient.equalsIgnoreCase(AppConstants.Male))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsMale++;
                    }
                }
                else if(genderOfPatient.equalsIgnoreCase(AppConstants.Female))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsFemale++;
                    }   
                }
                 else if(genderOfPatient.equalsIgnoreCase(AppConstants.Other))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsOther++;
                    }
                }
            }
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsMale, "Patients with Abnormal Blood Pressure", "Male");
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsMale, "Patients with Abnormal Blood Pressure", "Female");
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsOther, "Patients with Abnormal Blood Pressure", "Others");
            JFreeChart jchart = ChartFactory.createBarChart("Gender level Analysis", "Gender", "Number of patients with abnormal "+selectedCategory, dcd, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = jchart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            ChartFrame chartFrame = new ChartFrame("Records", jchart, true);
            chartFrame.setVisible(true);
            chartFrame.setSize(500, 400);
        }
        
    }//GEN-LAST:event_btnGenderAnalysisActionPerformed

    private void btnLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataActionPerformed
        // TODO add your handling code here:
         String projectPath = System.getProperty("user.dir");

        try
             {
                File patientRecordXMLFile = new File(projectPath + AppConstants.EncountersXMLFilePath);
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(patientRecordXMLFile);
                doc.getDocumentElement().normalize();

                NodeList nList = doc.getElementsByTagName("encounter");

            for (int temp = 0; temp < nList.getLength(); temp++) 
            {
                Node nNode = nList.item(temp);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                {
                    Element eElement = (Element) nNode;

                   String mrn = (eElement.getAttribute(AppConstants.nodeMRN));
                   Patient patient = system.getPatientDirectory().findPatientByMRN(mrn, 
                           system.getPatientDirectory().getPatientList());
                   String gender = eElement.getElementsByTagName(AppConstants.nodeGender)
                                        .item(0).getTextContent();
                   String ethinicity = eElement.getElementsByTagName(AppConstants.nodeEthinicity)
                                        .item(0).getTextContent();
 
                   String dateOfVisitInString = eElement.getElementsByTagName(AppConstants.nodeDateOfVisit)
                                        .item(0).getTextContent();
                   DateFormat dateOfVisit = new SimpleDateFormat(dateOfVisitInString, Locale.ENGLISH);
                   Date date = dateOfVisit.parse(dateOfVisitInString);
                   double weight = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeWeight)
                                        .item(0).getTextContent());
                    double height = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeHeight)
                                        .item(0).getTextContent());
                    double cholestrolReading = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeCholestrolReading)
                                        .item(0).getTextContent());
                    double systoleReading = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeSystoleReading)
                                        .item(0).getTextContent()); 
                    double diastoleReading = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeDiastoleReading)
                                        .item(0).getTextContent());
                    
                    system.getVitalSignsDirectory().createVitalSignsRecord(patient, gender, ethinicity, 
                            date, height, weight, systoleReading, diastoleReading, cholestrolReading);
                    
                }
            }
            JOptionPane.showMessageDialog(this, "Success");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadDataActionPerformed

    private void btnEthinicityAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEthinicityAnalysisActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dcd = new DefaultCategoryDataset();
        String selectedCategory = ddHealthCategory.getSelectedItem().toString();
        if(selectedCategory.equals("BMI"))
        {
            int countOfPatientsWithAbnormalBMILevelsWhite = 0;
            int countOfPatientsWithAbnormalBMILevelsAfricanAmerican = 0;
            int countOfPatientsWithAbnormalBMILevelsHispanic = 0;
            int countOfPatientsWithAbnormalBMILevelsAsian = 0;
            int countOfPatientsWithAbnormalBMILevelsAmericanIndian = 0;
            int countOfPatientsWithAbnormalBMILevelsNativeHawaiian = 0;
            for(VitalSigns vitalSigns : system.getVitalSignsDirectory().getListOfVitalSigns())
            {
                int bmiCriticalityOfPatient = vitalSigns.getBMIDangerLevel();
                String ethinicityOfPatient = vitalSigns.getEthinicity();
                if(ethinicityOfPatient.equals(AppConstants.WhiteNonHispanic))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBMILevelsWhite++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.BlackNonHispanic))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBMILevelsAfricanAmerican++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.Hispanic))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBMILevelsHispanic++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.Asian))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBMILevelsAsian++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.AmericanIndianOrAlaskaNative))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBMILevelsAmericanIndian++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.NativeHawaiian))
                {
                    if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBMILevelsNativeHawaiian++;
                    }
                }
            }
            dcd.setValue(countOfPatientsWithAbnormalBMILevelsWhite, "Patients with Abnormal BMI", AppConstants.WhiteNonHispanic);
            dcd.setValue(countOfPatientsWithAbnormalBMILevelsAfricanAmerican, "Patients with Abnormal BMI", AppConstants.BlackNonHispanic);
            dcd.setValue(countOfPatientsWithAbnormalBMILevelsHispanic, "Patients with Abnormal BMI", AppConstants.Hispanic);
            dcd.setValue(countOfPatientsWithAbnormalBMILevelsAsian, "Patients with Abnormal BMI", AppConstants.Asian);
            dcd.setValue(countOfPatientsWithAbnormalBMILevelsAmericanIndian, "Patients with Abnormal BMI", AppConstants.AmericanIndianOrAlaskaNative);
            dcd.setValue(countOfPatientsWithAbnormalBMILevelsNativeHawaiian, "Patients with Abnormal BMI", AppConstants.NativeHawaiian);
            
            JFreeChart jchart = ChartFactory.createBarChart("Ethnicity level Analysis", "Ethnicity", "Number of patients with abnormal "+selectedCategory, dcd, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = jchart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            ChartFrame chartFrame = new ChartFrame("Records", jchart, true);
            chartFrame.setVisible(true);
            chartFrame.setSize(500, 400);
        }
        else if(selectedCategory.equals("Cholesterol"))
        {
            int countOfPatientsWithAbnormalCholesterolLevelsWhite = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsAfricanAmerican = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsHispanic = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsAsian = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsAmericanIndian = 0;
            int countOfPatientsWithAbnormalCholesterolLevelsNativeHawaiian = 0;
        
            for(VitalSigns vitalSigns : system.getVitalSignsDirectory().getListOfVitalSigns())
            {
                String ethinicityOfPatient = vitalSigns.getEthinicity();
                int cholesterolCriticalityOfPatient = vitalSigns.getCholesterolDangerLevel();
                
                if(ethinicityOfPatient.equals(AppConstants.WhiteNonHispanic))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsWhite++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.BlackNonHispanic))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsAfricanAmerican++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.Hispanic))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsHispanic++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.Asian))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsAsian++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.AmericanIndianOrAlaskaNative))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsAmericanIndian++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.NativeHawaiian))
                {
                    if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalCholesterolLevelsNativeHawaiian++;
                    }
                }
            }
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsWhite, "Patients with Abnormal BMI", AppConstants.WhiteNonHispanic);
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsAfricanAmerican, "Patients with Abnormal BMI", AppConstants.BlackNonHispanic);
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsHispanic, "Patients with Abnormal BMI", AppConstants.Hispanic);
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsAsian, "Patients with Abnormal BMI", AppConstants.Asian);
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsAmericanIndian, "Patients with Abnormal BMI", AppConstants.AmericanIndianOrAlaskaNative);
            dcd.setValue(countOfPatientsWithAbnormalCholesterolLevelsNativeHawaiian, "Patients with Abnormal BMI", AppConstants.NativeHawaiian);
            
            JFreeChart jchart = ChartFactory.createBarChart("Ethnicity level Analysis", "Ethnicity", "Number of patients with abnormal "+selectedCategory, dcd, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = jchart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            ChartFrame chartFrame = new ChartFrame("Records", jchart, true);
            chartFrame.setVisible(true);
            chartFrame.setSize(500, 400);
        }
        
        // Blood Pressure
        else
        {
            int countOfPatientsWithAbnormalBPLevelsWhite = 0;
            int countOfPatientsWithAbnormalBPLevelsAfricanAmerican = 0;
            int countOfPatientsWithAbnormalBPLevelsHispanic = 0;
            int countOfPatientsWithAbnormalBPLevelsAsian = 0;
            int countOfPatientsWithAbnormalBPLevelsAmericanIndian = 0;
            int countOfPatientsWithAbnormalBPLevelsNativeHawaiian = 0;
        
            for(VitalSigns vitalSigns : system.getVitalSignsDirectory().getListOfVitalSigns())
            {
                String ethinicityOfPatient = vitalSigns.getEthinicity();
                int bpCriticalityOfPatient = vitalSigns.getBloodPressureDangerLevel();
                
                if(ethinicityOfPatient.equals(AppConstants.WhiteNonHispanic))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsWhite++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.BlackNonHispanic))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsAfricanAmerican++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.Hispanic))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsHispanic++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.Asian))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsAsian++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.AmericanIndianOrAlaskaNative))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsAmericanIndian++;
                    }
                }
                else if(ethinicityOfPatient.equals(AppConstants.NativeHawaiian))
                {
                    if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                    {
                        countOfPatientsWithAbnormalBPLevelsNativeHawaiian++;
                    }
                }
            }
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsWhite, "Patients with Abnormal Blood Pressure", AppConstants.WhiteNonHispanic);
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsAfricanAmerican, "Patients with Abnormal Blood Pressure", AppConstants.BlackNonHispanic);
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsHispanic, "Patients with Abnormal Blood Pressure", AppConstants.Hispanic);
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsAsian, "Patients with Abnormal Blood Pressure", AppConstants.Asian);
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsAmericanIndian, "Patients with Abnormal Blood Pressure", AppConstants.AmericanIndianOrAlaskaNative);
            dcd.setValue(countOfPatientsWithAbnormalBPLevelsNativeHawaiian, "Patients with Abnormal Blood Pressure", AppConstants.NativeHawaiian);
            
            JFreeChart jchart = ChartFactory.createBarChart("Ethnicity level Analysis", "Ethnicity", "Number of patients with abnormal "+selectedCategory, dcd, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = jchart.getCategoryPlot();
            plot.setRangeGridlinePaint(Color.BLACK);
            ChartFrame chartFrame = new ChartFrame("Records", jchart, true);
            chartFrame.setVisible(true);
            chartFrame.setSize(500, 400);
        }
    }//GEN-LAST:event_btnEthinicityAnalysisActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEthinicityAnalysis;
    private javax.swing.JButton btnGenderAnalysis;
    private javax.swing.JButton btnLoadData;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JComboBox<String> ddHealthCategory;
    // End of variables declaration//GEN-END:variables
}
